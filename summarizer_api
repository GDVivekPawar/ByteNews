from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
from transformers import pipeline
import logging

# Initialize Flask app
app = Flask(__name__)
CORS(app)
# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load HuggingFace models once at startup (optimize loading)
logger.info("Loading models...")
summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
classifier = pipeline("zero-shot-classification", model="facebook/bart-large-mnli")
logger.info("Models loaded successfully.")

# Define categories and keywords
CATEGORIES = ['tech', 'gaming', 'science', 'space', 'world', 'health', 'politics']

CATEGORY_KEYWORDS = {
    'tech': ['technology', 'software', 'hardware', 'AI', 'machine learning', 'gadget', 'tech'],
    'gaming': ['game', 'gaming', 'esports', 'playstation', 'xbox', 'nintendo', 'steam'],
    'science': ['science', 'experiment', 'discovery', 'biology', 'chemistry', 'physics'],
    'space': ['space', 'nasa', 'rocket', 'astronomy', 'mars', 'satellite'],
    'world': ['global', 'international', 'world', 'country', 'conflict'],
    'health': ['health', 'medicine', 'doctor', 'hospital', 'surgery', 'mental health', 'vaccine', 'pandemic', 'covid', 'fitness'],
    'politics': ['politics', 'election', 'government', 'minister', 'policy', 'parliament'],
}

GNEWS_API_KEY = "6c8e0dd7de4cd667015e9a68a1876c0f"

# Routes

@app.route("/summarize", methods=["POST"])
def summarize_article():
    data = request.json
    content = data.get("content", "")

    if not content:
        return jsonify({"error": "No content provided"}), 400

    try:
        content = content.strip().replace("\n", " ")
        if len(content.split()) > 512:
            content = " ".join(content.split()[:512])

        summary = summarizer(content, max_length=60, min_length=40, do_sample=False)
        return jsonify({"summary": summary[0]["summary_text"]})
    except Exception as e:
        logger.error("Error during summarization: %s", e)
        return jsonify({"error": "Summarization failed"}), 500


@app.route("/news", methods=["GET"])
def fetch_news():
    category = request.args.get("category", "general")
    page = request.args.get("page", 1)
    try:
        url = f"https://gnews.io/api/v4/top-headlines?token={GNEWS_API_KEY}&lang=en&topic={category}&max=10&page={page}"
        response = requests.get(url)
        response.raise_for_status()
        return jsonify(response.json())
    except Exception as e:
        logger.error("Error fetching news: %s", e)
        return jsonify({"error": "Failed to fetch news"}), 500


@app.route("/search", methods=["GET"])
def search_news():
    query = request.args.get("query", "")
    page = request.args.get("page", 1)

    if not query:
        return jsonify({"error": "No search query provided"}), 400

    try:
        url = f"https://gnews.io/api/v4/search?token={GNEWS_API_KEY}&lang=en&q={query}&max=10&page={page}"
        response = requests.get(url)
        response.raise_for_status()
        return jsonify(response.json())
    except Exception as e:
        logger.error("Error during search: %s", e)
        return jsonify({"error": "Failed to fetch search results"}), 500


@app.route("/filter", methods=["POST"])
def filter_articles():
    data = request.get_json()
    category = data.get('category', '').lower()
    articles = data.get('articles', [])

    if category not in CATEGORIES:
        return jsonify({"articles": []})

    filtered = []

    for article in articles:
        title = article.get('title', '')
        description = article.get('description', '')
        content = f"{title}. {description}"

        text_lower = content.lower()
        keywords = CATEGORY_KEYWORDS.get(category, [])

        # Keyword match first
        if any(keyword in text_lower for keyword in keywords):
            filtered.append(article)
            continue

        try:
            classification = classifier(content, CATEGORIES)
            for label, score in zip(classification['labels'][:3], classification['scores'][:3]):
                if label == category and score >= 0.8:
                    filtered.append(article)
                    break
        except Exception as e:
            logger.error("Error in classification: %s", e)
            continue

    return jsonify({'articles': filtered})


if __name__ == "__main__":
    app.run(debug=True)
